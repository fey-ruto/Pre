# -*- coding: utf-8 -*-
"""PM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MiHPJ_Q-uo12QpNMIzUI6k5MbtxVwv6Y
"""

import pandas as pd

# Load the dataset
file_path = '/content/Food_Prices_Kenya.csv'
data = pd.read_csv(file_path)

# Inspect the data
print(data.head())
print(data.info())

import pandas as pd

# Load the dataset
file_path = '/content/Food_Prices_Kenya.csv'
data = pd.read_csv(file_path)

# Inspect the data
print(data.head())
print(data.info())

# Drop columns with all NaN values
data = data.dropna(axis=1, how='all')

# Reset the index to ensure default integer index starting from 0
data = data.reset_index(drop=True)

# Now you can safely drop the first row (which will have index 0 after reset_index)
data = data.drop(0)

# Drop unnecessary unnamed columns
data = data.loc[:, ~data.columns.str.contains('^Unnamed')]

# Forward fill remaining missing values
data = data.ffill()

# Convert necessary columns to correct data types
data['Price'] = pd.to_numeric(data['Price'], errors='coerce')
data['Usdprice'] = pd.to_numeric(data['Usdprice'], errors='coerce')
data['Amount Produced'] = pd.to_numeric(data['Amount Produced'], errors='coerce')
data['Annual Rainfall'] = pd.to_numeric(data['Annual Rainfall'], errors='coerce')
data['Annual Temperature'] = pd.to_numeric(data['Annual Temperature'], errors='coerce')

# Convert date-related columns to datetime
data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

# Fill any remaining missing values for numerical columns with mean or median
numeric_columns = data.select_dtypes(include=['number']).columns
data[numeric_columns] = data[numeric_columns].fillna(data[numeric_columns].mean())

# Extract month and year from the Date column
data['Month'] = data['Date'].dt.month
data['Year'] = data['Date'].dt.year

# Drop original Date column if not needed
data.drop(columns=['Date'], inplace=True)

# Inspect the cleaned data
print(data.head())
print(data.info())

from sklearn.model_selection import train_test_split

# Select features and target variable
features = ['Month', 'Year', 'Regions', 'Annual Rainfall', 'Annual Temperature']
X = data[features]
y = data['Price']

# Convert categorical variables to dummy variables
X = pd.get_dummies(X, columns=['Regions'], drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping

# Define the ANN model
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

# Define early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Train the model with early stopping
history = model.fit(X_train, y_train, validation_split=0.2, epochs=200, batch_size=32, callbacks=[early_stopping])

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Evaluate the model
loss, mae = model.evaluate(X_test, y_test)
print(f"MAE: {mae}")

# Predict and evaluate the model
y_pred = model.predict(X_test)
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred)}")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred)}")
print(f"R-squared: {r2_score(y_test, y_pred)}")